{"ast":null,"code":"export default {\n  data() {\n    return {\n      currentPage: 1,\n      selectedUsers: [],\n      users: [],\n      // Initialize users array\n      pageSize: 10 // Default page size\n    };\n  },\n  computed: {\n    totalUsers() {\n      return this.users.length;\n    },\n    totalPages() {\n      return Math.ceil(this.totalUsers / this.pageSize);\n    },\n    paginatedUsers() {\n      const startIndex = (this.currentPage - 1) * this.pageSize;\n      const endIndex = Math.min(startIndex + this.pageSize - 1, this.totalUsers - 1);\n      return this.users.slice(startIndex, endIndex + 1);\n    }\n  },\n  methods: {\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    remove(userId) {\n      this.$emit('delete', userId);\n    },\n    getStatus(status) {\n      return status ? 'Delivered' : 'Pending'; // Modify status display\n    },\n    fetchData() {\n      // Simulate fetching data from the API (replace this with actual API call)\n      // Example data\n      const exampleData = [{\n        id: 1,\n        status: true,\n        name: 'John Doe',\n        email: 'john@example.com',\n        total: 100,\n        issued_date: '2024-03-24',\n        balance: 50\n      }, {\n        id: 2,\n        status: false,\n        name: 'Jane Smith',\n        email: 'jane@example.com',\n        total: 200,\n        issued_date: '2024-03-25',\n        balance: 75\n      }\n      // Add more example data as needed\n      ];\n\n      // Transform status values from true/false to Delivered/Pending\n      this.users = exampleData.map(user => ({\n        ...user,\n        status: user.status ? 'Delivered' : 'Pending'\n      }));\n    }\n  }\n};","map":{"version":3,"names":["data","currentPage","selectedUsers","users","pageSize","computed","totalUsers","length","totalPages","Math","ceil","paginatedUsers","startIndex","endIndex","min","slice","methods","prevPage","nextPage","remove","userId","$emit","getStatus","status","fetchData","exampleData","id","name","email","total","issued_date","balance","map","user"],"sources":["C:\\Users\\nitis\\vuecrud\\src\\components\\AddData.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- Button to fetch data -->\r\n    <button @click=\"fetchData\">Fetch Data</button>\r\n\r\n    <!-- Table to display user data -->\r\n    <table class=\"user-table\">\r\n      <thead>\r\n        <tr>\r\n          <th class=\"checkbox-col\"> SELECT </th>\r\n          <th>ID</th>\r\n          <th>STATUS</th>\r\n          <th>CLIENT</th>\r\n          <th>TOTAL</th>\r\n          <th>ISSUED DATE</th>\r\n          <th>BALANCE</th>\r\n          <th>ACTIONS</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(user, index) in paginatedUsers\" :key=\"user.id\">\r\n          <td><input type=\"checkbox\" v-model=\"selectedUsers[index]\"></td>\r\n          <td>{{ user.id }}</td>\r\n          <td>{{ getStatus(user.status) }}</td> <!-- Call getStatus method -->\r\n          <td class=\"client-col\">\r\n            <div>{{ user.name }}</div>\r\n            <div>{{ user.email }}</div>\r\n          </td>\r\n          <td>{{ user.total }}</td>\r\n          <td>{{ user.issued_date }}</td>\r\n          <td>{{ user.balance }}</td>\r\n          <td><button @click=\"remove(user.id)\">Delete</button></td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Pagination controls -->\r\n    <div class=\"pagination\">\r\n      <button @click=\"prevPage\" :disabled=\"currentPage === 1\">Previous</button>\r\n      <span>{{ currentPage }} / {{ totalPages }}</span>\r\n      <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">Next</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      currentPage: 1,\r\n      selectedUsers: [],\r\n      users: [], // Initialize users array\r\n      pageSize: 10 // Default page size\r\n    };\r\n  },\r\n  computed: {\r\n    totalUsers() {\r\n      return this.users.length;\r\n    },\r\n    totalPages() {\r\n      return Math.ceil(this.totalUsers / this.pageSize);\r\n    },\r\n    paginatedUsers() {\r\n      const startIndex = (this.currentPage - 1) * this.pageSize;\r\n      const endIndex = Math.min(startIndex + this.pageSize - 1, this.totalUsers - 1);\r\n      return this.users.slice(startIndex, endIndex + 1);\r\n    }\r\n  },\r\n  methods: {\r\n    prevPage() {\r\n      if (this.currentPage > 1) {\r\n        this.currentPage--;\r\n      }\r\n    },\r\n    nextPage() {\r\n      if (this.currentPage < this.totalPages) {\r\n        this.currentPage++;\r\n      }\r\n    },\r\n    remove(userId) {\r\n      this.$emit('delete', userId);\r\n    },\r\n    getStatus(status) {\r\n      return status ? 'Delivered' : 'Pending'; // Modify status display\r\n    },\r\n    fetchData() {\r\n      // Simulate fetching data from the API (replace this with actual API call)\r\n      // Example data\r\n      const exampleData = [\r\n        { id: 1, status: true, name: 'John Doe', email: 'john@example.com', total: 100, issued_date: '2024-03-24', balance: 50 },\r\n        { id: 2, status: false, name: 'Jane Smith', email: 'jane@example.com', total: 200, issued_date: '2024-03-25', balance: 75 }\r\n        // Add more example data as needed\r\n      ];\r\n\r\n      // Transform status values from true/false to Delivered/Pending\r\n      this.users = exampleData.map(user => ({\r\n        ...user,\r\n        status: user.status ? 'Delivered' : 'Pending'\r\n      }));\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Your component-specific styles */\r\n</style>\r\n"],"mappings":"AA8CA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,CAAC;MACdC,aAAa,EAAE,EAAE;MACjBC,KAAK,EAAE,EAAE;MAAE;MACXC,QAAQ,EAAE,EAAC,CAAE;IACf,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,UAAUA,CAAA,EAAG;MACX,OAAO,IAAI,CAACH,KAAK,CAACI,MAAM;IAC1B,CAAC;IACDC,UAAUA,CAAA,EAAG;MACX,OAAOC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACJ,UAAS,GAAI,IAAI,CAACF,QAAQ,CAAC;IACnD,CAAC;IACDO,cAAcA,CAAA,EAAG;MACf,MAAMC,UAAS,GAAI,CAAC,IAAI,CAACX,WAAU,GAAI,CAAC,IAAI,IAAI,CAACG,QAAQ;MACzD,MAAMS,QAAO,GAAIJ,IAAI,CAACK,GAAG,CAACF,UAAS,GAAI,IAAI,CAACR,QAAO,GAAI,CAAC,EAAE,IAAI,CAACE,UAAS,GAAI,CAAC,CAAC;MAC9E,OAAO,IAAI,CAACH,KAAK,CAACY,KAAK,CAACH,UAAU,EAAEC,QAAO,GAAI,CAAC,CAAC;IACnD;EACF,CAAC;EACDG,OAAO,EAAE;IACPC,QAAQA,CAAA,EAAG;MACT,IAAI,IAAI,CAAChB,WAAU,GAAI,CAAC,EAAE;QACxB,IAAI,CAACA,WAAW,EAAE;MACpB;IACF,CAAC;IACDiB,QAAQA,CAAA,EAAG;MACT,IAAI,IAAI,CAACjB,WAAU,GAAI,IAAI,CAACO,UAAU,EAAE;QACtC,IAAI,CAACP,WAAW,EAAE;MACpB;IACF,CAAC;IACDkB,MAAMA,CAACC,MAAM,EAAE;MACb,IAAI,CAACC,KAAK,CAAC,QAAQ,EAAED,MAAM,CAAC;IAC9B,CAAC;IACDE,SAASA,CAACC,MAAM,EAAE;MAChB,OAAOA,MAAK,GAAI,WAAU,GAAI,SAAS,EAAE;IAC3C,CAAC;IACDC,SAASA,CAAA,EAAG;MACV;MACA;MACA,MAAMC,WAAU,GAAI,CAClB;QAAEC,EAAE,EAAE,CAAC;QAAEH,MAAM,EAAE,IAAI;QAAEI,IAAI,EAAE,UAAU;QAAEC,KAAK,EAAE,kBAAkB;QAAEC,KAAK,EAAE,GAAG;QAAEC,WAAW,EAAE,YAAY;QAAEC,OAAO,EAAE;MAAG,CAAC,EACxH;QAAEL,EAAE,EAAE,CAAC;QAAEH,MAAM,EAAE,KAAK;QAAEI,IAAI,EAAE,YAAY;QAAEC,KAAK,EAAE,kBAAkB;QAAEC,KAAK,EAAE,GAAG;QAAEC,WAAW,EAAE,YAAY;QAAEC,OAAO,EAAE;MAAG;MAC1H;MAAA,CACD;;MAED;MACA,IAAI,CAAC5B,KAAI,GAAIsB,WAAW,CAACO,GAAG,CAACC,IAAG,KAAM;QACpC,GAAGA,IAAI;QACPV,MAAM,EAAEU,IAAI,CAACV,MAAK,GAAI,WAAU,GAAI;MACtC,CAAC,CAAC,CAAC;IACL;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
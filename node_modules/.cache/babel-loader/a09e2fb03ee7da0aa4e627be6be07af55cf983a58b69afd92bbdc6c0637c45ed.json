{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport TableData from './components/TableData.vue';\nexport default {\n  name: 'App',\n  components: {\n    TableData\n  },\n  data() {\n    return {\n      users: [],\n      // Initialize empty array to hold user data\n      nextUserId: 1 // Initialize user ID counter\n    };\n  },\n  created() {\n    // Fetch users from the local storage when the component is created\n    this.fetchUsers();\n  },\n  methods: {\n    fetchUsers() {\n      // Retrieve users from local storage (or other persistent storage)\n      const storedUsers = localStorage.getItem('users');\n      this.users = storedUsers ? JSON.parse(storedUsers) : [];\n    },\n    saveUsers() {\n      // Save users to local storage (or other persistent storage)\n      localStorage.setItem('users', JSON.stringify(this.users));\n    },\n    addNewUser() {\n      // Create a new user object\n      const newUser = {\n        id: this.nextUserId++,\n        // Assign a new ID and increment the counter\n        name: 'New User',\n        // Default name\n        email: 'newuser@example.com' // Default email\n        // Add more properties as needed\n      };\n      // Add the new user to the users array\n      this.users.push(newUser);\n      // Save the updated users array\n      this.saveUsers();\n    },\n    editUser(user) {\n      console.log('Editing user:', user);\n      // Logic to edit user data\n      // Update user data in the users array\n      // Save the updated users array\n      this.saveUsers();\n    },\n    deleteUser(userId) {\n      console.log('Deleting user with ID:', userId);\n      // Remove the user from the users array\n      this.users = this.users.filter(user => user.id !== userId);\n      // Save the updated users array\n      this.saveUsers();\n    }\n  }\n};","map":{"version":3,"names":["TableData","name","components","data","users","nextUserId","created","fetchUsers","methods","storedUsers","localStorage","getItem","JSON","parse","saveUsers","setItem","stringify","addNewUser","newUser","id","email","push","editUser","user","console","log","deleteUser","userId","filter"],"sources":["C:\\Users\\nitis\\vuecrud\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <button @click=\"addNewUser\">+ Create Invoice</button>\n    <TableData :users=\"users\" @edit=\"editUser\" @delete=\"deleteUser\" />\n  </div>\n</template>\n\n<script>\nimport TableData from './components/TableData.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    TableData,\n  },\n  data() {\n    return {\n      users: [], // Initialize empty array to hold user data\n      nextUserId: 1, // Initialize user ID counter\n    };\n  },\n  created() {\n    // Fetch users from the local storage when the component is created\n    this.fetchUsers();\n  },\n  methods: {\n    fetchUsers() {\n      // Retrieve users from local storage (or other persistent storage)\n      const storedUsers = localStorage.getItem('users');\n      this.users = storedUsers ? JSON.parse(storedUsers) : [];\n    },\n    saveUsers() {\n      // Save users to local storage (or other persistent storage)\n      localStorage.setItem('users', JSON.stringify(this.users));\n    },\n    addNewUser() {\n      // Create a new user object\n      const newUser = {\n        id: this.nextUserId++, // Assign a new ID and increment the counter\n        name: 'New User', // Default name\n        email: 'newuser@example.com', // Default email\n        // Add more properties as needed\n      };\n      // Add the new user to the users array\n      this.users.push(newUser);\n      // Save the updated users array\n      this.saveUsers();\n    },\n    editUser(user) {\n      console.log('Editing user:', user);\n      // Logic to edit user data\n      // Update user data in the users array\n      // Save the updated users array\n      this.saveUsers();\n    },\n    deleteUser(userId) {\n      console.log('Deleting user with ID:', userId);\n      // Remove the user from the users array\n      this.users = this.users.filter(user => user.id !== userId);\n      // Save the updated users array\n      this.saveUsers();\n    },\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Arial, sans-serif;\n  text-align: center;\n}\n</style>\n"],"mappings":";AAQA,OAAOA,SAAQ,MAAO,4BAA4B;AAElD,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVF;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MAAE;MACXC,UAAU,EAAE,CAAC,CAAE;IACjB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB,CAAC;EACDC,OAAO,EAAE;IACPD,UAAUA,CAAA,EAAG;MACX;MACA,MAAME,WAAU,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MACjD,IAAI,CAACP,KAAI,GAAIK,WAAU,GAAIG,IAAI,CAACC,KAAK,CAACJ,WAAW,IAAI,EAAE;IACzD,CAAC;IACDK,SAASA,CAAA,EAAG;MACV;MACAJ,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,SAAS,CAAC,IAAI,CAACZ,KAAK,CAAC,CAAC;IAC3D,CAAC;IACDa,UAAUA,CAAA,EAAG;MACX;MACA,MAAMC,OAAM,GAAI;QACdC,EAAE,EAAE,IAAI,CAACd,UAAU,EAAE;QAAE;QACvBJ,IAAI,EAAE,UAAU;QAAE;QAClBmB,KAAK,EAAE,qBAAqB,CAAE;QAC9B;MACF,CAAC;MACD;MACA,IAAI,CAAChB,KAAK,CAACiB,IAAI,CAACH,OAAO,CAAC;MACxB;MACA,IAAI,CAACJ,SAAS,CAAC,CAAC;IAClB,CAAC;IACDQ,QAAQA,CAACC,IAAI,EAAE;MACbC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,IAAI,CAAC;MAClC;MACA;MACA;MACA,IAAI,CAACT,SAAS,CAAC,CAAC;IAClB,CAAC;IACDY,UAAUA,CAACC,MAAM,EAAE;MACjBH,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEE,MAAM,CAAC;MAC7C;MACA,IAAI,CAACvB,KAAI,GAAI,IAAI,CAACA,KAAK,CAACwB,MAAM,CAACL,IAAG,IAAKA,IAAI,CAACJ,EAAC,KAAMQ,MAAM,CAAC;MAC1D;MACA,IAAI,CAACb,SAAS,CAAC,CAAC;IAClB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
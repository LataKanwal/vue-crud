{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_TableData = _resolveComponent(\"TableData\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.addNewUser && $options.addNewUser(...args))\n  }, \"+ Create Invoice\"), _createVNode(_component_TableData, {\n    users: $data.users,\n    onEdit: $options.editUser,\n    onDelete: $options.deleteUser\n  }, null, 8 /* PROPS */, [\"users\", \"onEdit\", \"onDelete\"])]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","args","$options","addNewUser","_createVNode","_component_TableData","users","$data","onEdit","editUser","onDelete","deleteUser"],"sources":["C:\\Users\\nitis\\vuecrud\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <button @click=\"addNewUser\">+ Create Invoice</button>\n    <TableData :users=\"users\" @edit=\"editUser\" @delete=\"deleteUser\" />\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'; // You can remove this import\nimport TableData from './components/TableData.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    TableData,\n  },\n  data() {\n    return {\n      users: [],\n    };\n  },\n  created() {\n    this.fetchUsers();\n  },\n  methods: {\n    fetchUsers() {\n      // Read initial data from your local database (db.json)\n      // You can use axios or any other method to read the data\n      // Example using axios (you can replace this with file read operations)\n      axios.get('/api/users') // Assuming your local server serves the db.json file at /api/users\n        .then(response => {\n          this.users = response.data;\n        })\n        .catch(error => {\n          console.error('Error fetching users:', error);\n        });\n    },\n    addNewUser() {\n      // Logic to add a new user to your local database (db.json)\n      // Example: Append a new user object to the users array and save to db.json\n      const newUser = { id: this.users.length + 1, name: 'New User', email: 'newuser@example.com' };\n      this.users.push(newUser);\n      // Save the updated users array to db.json (you need to implement this)\n      // Example: Write the updated users array to db.json using file write operations\n    },\n    editUser(user) {\n      console.log('Editing user:', user);\n      // Logic to update user data in your local database (db.json)\n      // Example: Find the user by ID in the users array, update its properties, and save to db.json\n    },\n    deleteUser(userId) {\n      console.log('Deleting user with ID:', userId);\n      // Logic to delete user data from your local database (db.json)\n      // Example: Filter out the user by ID from the users array and save to db.json\n    },\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Arial, sans-serif;\n  text-align: center;\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;;uBAAbC,mBAAA,CAGM,OAHNC,UAGM,GAFJC,mBAAA,CAAqD;IAA5CC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;KAAE,kBAAgB,GAC5CG,YAAA,CAAkEC,oBAAA;IAAtDC,KAAK,EAAEC,KAAA,CAAAD,KAAK;IAAGE,MAAI,EAAEN,QAAA,CAAAO,QAAQ;IAAGC,QAAM,EAAER,QAAA,CAAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
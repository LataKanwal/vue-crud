{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios'; // You can remove this import\nimport TableData from './components/TableData.vue';\nexport default {\n  name: 'App',\n  components: {\n    TableData\n  },\n  data() {\n    return {\n      users: []\n    };\n  },\n  created() {\n    this.fetchUsers();\n  },\n  methods: {\n    fetchUsers() {\n      // Read initial data from your local database (db.json)\n      // You can use axios or any other method to read the data\n      // Example using axios (you can replace this with file read operations)\n      axios.get('/api/users') // Assuming your local server serves the db.json file at /api/users\n      .then(response => {\n        this.users = response.data;\n      }).catch(error => {\n        console.error('Error fetching users:', error);\n      });\n    },\n    addNewUser() {\n      // Logic to add a new user to your local database (db.json)\n      // Example: Append a new user object to the users array and save to db.json\n      const newUser = {\n        id: this.users.length + 1,\n        name: 'New User',\n        email: 'newuser@example.com'\n      };\n      this.users.push(newUser);\n      // Save the updated users array to db.json (you need to implement this)\n      // Example: Write the updated users array to db.json using file write operations\n    },\n    editUser(user) {\n      console.log('Editing user:', user);\n      // Logic to update user data in your local database (db.json)\n      // Example: Find the user by ID in the users array, update its properties, and save to db.json\n    },\n    deleteUser(userId) {\n      console.log('Deleting user with ID:', userId);\n      // Logic to delete user data from your local database (db.json)\n      // Example: Filter out the user by ID from the users array and save to db.json\n    }\n  }\n};","map":{"version":3,"names":["axios","TableData","name","components","data","users","created","fetchUsers","methods","get","then","response","catch","error","console","addNewUser","newUser","id","length","email","push","editUser","user","log","deleteUser","userId"],"sources":["C:\\Users\\nitis\\vuecrud\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <button @click=\"addNewUser\">+ Create Invoice</button>\n    <TableData :users=\"users\" @edit=\"editUser\" @delete=\"deleteUser\" />\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'; // You can remove this import\nimport TableData from './components/TableData.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    TableData,\n  },\n  data() {\n    return {\n      users: [],\n    };\n  },\n  created() {\n    this.fetchUsers();\n  },\n  methods: {\n    fetchUsers() {\n      // Read initial data from your local database (db.json)\n      // You can use axios or any other method to read the data\n      // Example using axios (you can replace this with file read operations)\n      axios.get('/api/users') // Assuming your local server serves the db.json file at /api/users\n        .then(response => {\n          this.users = response.data;\n        })\n        .catch(error => {\n          console.error('Error fetching users:', error);\n        });\n    },\n    addNewUser() {\n      // Logic to add a new user to your local database (db.json)\n      // Example: Append a new user object to the users array and save to db.json\n      const newUser = { id: this.users.length + 1, name: 'New User', email: 'newuser@example.com' };\n      this.users.push(newUser);\n      // Save the updated users array to db.json (you need to implement this)\n      // Example: Write the updated users array to db.json using file write operations\n    },\n    editUser(user) {\n      console.log('Editing user:', user);\n      // Logic to update user data in your local database (db.json)\n      // Example: Find the user by ID in the users array, update its properties, and save to db.json\n    },\n    deleteUser(userId) {\n      console.log('Deleting user with ID:', userId);\n      // Logic to delete user data from your local database (db.json)\n      // Example: Filter out the user by ID from the users array and save to db.json\n    },\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: Arial, sans-serif;\n  text-align: center;\n}\n</style>\n"],"mappings":";AAQA,OAAOA,KAAI,MAAO,OAAO,EAAE;AAC3B,OAAOC,SAAQ,MAAO,4BAA4B;AAElD,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVF;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB,CAAC;EACDC,OAAO,EAAE;IACPD,UAAUA,CAAA,EAAG;MACX;MACA;MACA;MACAP,KAAK,CAACS,GAAG,CAAC,YAAY,EAAE;MAAA,CACrBC,IAAI,CAACC,QAAO,IAAK;QAChB,IAAI,CAACN,KAAI,GAAIM,QAAQ,CAACP,IAAI;MAC5B,CAAC,EACAQ,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C,CAAC,CAAC;IACN,CAAC;IACDE,UAAUA,CAAA,EAAG;MACX;MACA;MACA,MAAMC,OAAM,GAAI;QAAEC,EAAE,EAAE,IAAI,CAACZ,KAAK,CAACa,MAAK,GAAI,CAAC;QAAEhB,IAAI,EAAE,UAAU;QAAEiB,KAAK,EAAE;MAAsB,CAAC;MAC7F,IAAI,CAACd,KAAK,CAACe,IAAI,CAACJ,OAAO,CAAC;MACxB;MACA;IACF,CAAC;IACDK,QAAQA,CAACC,IAAI,EAAE;MACbR,OAAO,CAACS,GAAG,CAAC,eAAe,EAAED,IAAI,CAAC;MAClC;MACA;IACF,CAAC;IACDE,UAAUA,CAACC,MAAM,EAAE;MACjBX,OAAO,CAACS,GAAG,CAAC,wBAAwB,EAAEE,MAAM,CAAC;MAC7C;MACA;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}